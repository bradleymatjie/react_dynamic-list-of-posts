{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onSelectPost","useState","openPostId","setOpenPostId","handleSelectPost","useCallback","post","id","handleDeselectPost","className","map","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","postId","onAddComment","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","name","setName","email","setEmail","setBody","isWaiting","setIsWaiting","postComment","commentData","postedComment","handleNameChange","event","target","value","handleEmailChange","handleBodyChange","handleClear","onSubmit","preventDefault","length","htmlFor","onChange","placeholder","PostDetails","comments","setComments","isCommentsLoading","setIsCommentsLoading","errorInComments","setErrorInComments","isCommenting","setIsCommenting","fetchComments","a","result","useEffect","handleDeleteComment","commentId","prevComments","filter","comment","handleAddComment","href","UserSelector","users","onUserSelect","selectingUser","setSelectingUser","chosenUser","setChosenUser","showDropdown","isVisible","handleUserSelection","user","onBlur","role","onMouseDown","App","selectedPost","setSelectedPost","selectedUser","setSelectedUser","setPosts","isPostsLoading","setIsPostsLoading","setUsers","errorLoadingPosts","setErrorLoadingPosts","loadUsers","userData","loadPosts","userId","postsData","fetchPostsForUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d0cc76a.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onSelectPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectPost,\n}) => {\n  const [openPostId, setOpenPostId] = useState(-1);\n  const handleSelectPost = useCallback(\n    (post: Post) => {\n      setOpenPostId(post.id);\n      onSelectPost(post);\n    }, [],\n  );\n\n  const handleDeselectPost = useCallback(() => {\n    onSelectPost(null);\n    setOpenPostId(-1);\n  }, []);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': openPostId !== post.id,\n                    },\n                  )}\n                  onClick={() => (\n                    openPostId === post.id\n                      ? handleDeselectPost()\n                      : handleSelectPost(post)\n                  )}\n                >\n                  {openPostId === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { CommentData, Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  onAddComment: (comment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  onAddComment,\n}) => {\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [bodyError, setBodyError] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isWaiting, setIsWaiting] = useState(false);\n\n  const postComment = useCallback(async (commentData: CommentData) => {\n    setIsWaiting(true);\n\n    try {\n      const postedComment = await client.post<Comment>(\n        '/comments',\n        commentData,\n      );\n\n      onAddComment(postedComment);\n    } catch (error) {\n      // some error handling\n    }\n\n    setIsWaiting(false);\n  }, []);\n\n  const handleAddComment = (event: React.FormEvent) => {\n    event.preventDefault();\n    setNameError(name.length === 0);\n    setEmailError(email.length === 0);\n    setBodyError(body.length === 0);\n\n    if (name.length === 0\n        || email.length === 0\n        || body.length === 0) {\n      return;\n    }\n\n    postComment({\n      name,\n      email,\n      body,\n      postId,\n    });\n    setBody('');\n  };\n\n  const handleNameChange = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setNameError(false);\n    setName(event.target.value);\n  }, []);\n\n  const handleEmailChange = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEmailError(false);\n    setEmail(event.target.value);\n  }, []);\n\n  const handleBodyChange = useCallback((\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setBodyError(false);\n    setBody(event.target.value);\n  }, []);\n\n  const handleClear = useCallback(() => {\n    setNameError(false);\n    setEmailError(false);\n    setBodyError(false);\n    setName('');\n    setEmail('');\n    setBody('');\n  }, []);\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleAddComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleNameChange}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': nameError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleEmailChange}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': emailError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            onChange={handleBodyChange}\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': bodyError,\n              },\n            )}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              {\n                'is-loading': isWaiting,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [errorInComments, setErrorInComments] = useState(false);\n  const [isCommenting, setIsCommenting] = useState(false);\n\n  const fetchComments = useCallback(async () => {\n    setIsCommentsLoading(true);\n    setErrorInComments(false);\n    try {\n      const result = await client.get<Comment[]>(`/comments?postId=${post.id}`);\n\n      setComments(result);\n    } catch (error) {\n      setErrorInComments(true);\n    }\n\n    setIsCommentsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    setIsCommenting(false);\n    setComments([]);\n    fetchComments();\n  }, [post]);\n\n  const handleWriteComment = () => {\n    setIsCommenting(true);\n  };\n\n  const handleDeleteComment = useCallback((commentId: number) => {\n    setComments((prevComments) => (\n      prevComments.filter(comment => comment.id !== commentId)\n    ));\n    client.delete(`/comments/${commentId}`);\n  }, []);\n\n  const handleAddComment = useCallback((comment: Comment) => {\n    setComments((prevComments) => ([\n      ...prevComments,\n      comment,\n    ]));\n  }, []);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && (\n            <Loader />\n          )}\n\n          {errorInComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isCommentsLoading && !errorInComments && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length !== 0 && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {comments.map((comment) => (\n            <article\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n              key={comment.id}\n            >\n              <div className=\"message-header\">\n                <a\n                  href={`mailto:${comment.email}`}\n                  data-cy=\"CommentAuthor\"\n                >\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => handleDeleteComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {!isCommentsLoading && !isCommenting && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommenting && (\n          <NewCommentForm\n            postId={post.id}\n            onAddComment={handleAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onUserSelect: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onUserSelect,\n}) => {\n  const [selectingUser, setSelectingUser] = useState(false);\n  const [chosenUser, setChosenUser] = useState('Choose a user');\n\n  const showDropdown = (isVisible: boolean) => {\n    setSelectingUser(isVisible);\n  };\n\n  const handleUserSelection = useCallback((user: User) => {\n    onUserSelect(user);\n    setSelectingUser(false);\n    setChosenUser(user.name);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        {\n          'is-active': selectingUser,\n        },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => showDropdown(true)}\n          onBlur={() => showDropdown(false)}\n\n        >\n          <span>{chosenUser}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              href={`#${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                {\n                  'is-active': chosenUser === user.name,\n                },\n              )}\n              key={user.id}\n              onMouseDown={() => handleUserSelection(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [errorLoadingPosts, setErrorLoadingPosts] = useState(false);\n\n  const loadUsers = useCallback(\n    async () => {\n      const userData = await client.get<User[]>('/users');\n\n      setUsers(userData);\n    }, [],\n  );\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadPosts = useCallback(\n    async (userId: number) => {\n      setIsPostsLoading(true);\n      setErrorLoadingPosts(false);\n      try {\n        const postsData = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n        setPosts(postsData);\n      } catch (error) {\n        setErrorLoadingPosts(true);\n      }\n\n      setIsPostsLoading(false);\n    }, [],\n  );\n\n  const fetchPostsForUser = useCallback((user: User) => {\n    setSelectedUser(user);\n    setPosts([]);\n    loadPosts(user.id);\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onUserSelect={fetchPostsForUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {selectedUser && isPostsLoading && (\n                  <Loader />\n                )}\n\n                {errorLoadingPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(selectedUser)\n                  && (posts.length === 0)\n                  && (!setErrorLoadingPosts)\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {selectedUser && (posts.length > 0) && (\n                  <PostsList\n                    posts={posts}\n                    onSelectPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}